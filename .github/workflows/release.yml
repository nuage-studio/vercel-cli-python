name: Check and release

on:
  schedule:
    - cron: "0 2 * * *" # daily at 02:00 UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Build and test only; skip publish and tagging"
        type: boolean
        default: false
      version_override:
        description: "Vendor and release a specific npm version (e.g. 46.0.2)"
        type: string
        required: false

permissions:
  contents: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      updated: ${{ steps.check.outputs.updated }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Check and (if needed) update vendored vercel
        id: check
        env:
          VERSION_OVERRIDE: ${{ inputs.version_override }}
        run: |
          if [ -n "${VERSION_OVERRIDE:-}" ]; then
            uv run vendor update "${VERSION_OVERRIDE}" --github-outputs
            CLI_VER=$(uv run vercel --version | tr -d '\r')
            echo "updated=true" >> "${GITHUB_OUTPUT}"
            echo "new_version=${CLI_VER}" >> "${GITHUB_OUTPUT}"
          else
            uv run vendor check --vendor --github-outputs
          fi

      - name: Commit and push changes
        if: steps.check.outputs.updated == 'true'
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          git add -A
          git commit -m "chore: vendor vercel@${{ steps.check.outputs.new_version }}"
          git push

  ci:
    needs: check
    if: needs.check.outputs.updated == 'true'
    uses: ./.github/workflows/ci-reusable.yml
    with:
      upload-codecov: false
    secrets: inherit

  release:
    needs: [check, ci]
    if: needs.check.outputs.updated == 'true' && github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.check.outputs.new_version }}
      DRY_RUN: ${{ inputs.dry_run }}
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      # Version verification is implicit: build uses the committed vendored CLI; tag uses $VERSION

      - name: Build distribution
        run: uv build

      - name: Publish to PyPI
        if: env.DRY_RUN != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create annotated tag
        if: env.DRY_RUN != 'true'
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          git tag -a "v${VERSION}" -m "${REPO_NAME} ${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        if: env.DRY_RUN != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
          files: |
            dist/*
